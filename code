import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.tree import plot_tree
from sklearn import metrics
from sklearn.model_selection import GridSearchCV
from ucimlrepo import fetch_ucirepo
%matplotlib inline

# fetch dataset
dermatology = fetch_ucirepo(id=33)

# data (as pandas dataframes)
X = dermatology.data.features
y = dermatology.data.targets

X_train,X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3,random_state= 42)

param_grid = {'criterion':['gini','entropy'], 'max_depth': np.arange(3,13),'min_samples_leaf': np.arange(1,366)}

clf= GridSearchCV(estimator= DecisionTreeClassifier(random_state= 42),param_grid= param_grid)

clf.fit(X_train.values, y_train)

clf = DecisionTreeClassifier(max_depth=5,min_samples_leaf= 13,random_state=42)

clf.fit(X_train.values, y_train)

ClassN = ['psoriasis','seborreic dermatitis','lichen planus', 'pityriasis rosea','chronic dermatitis','pityriasis rubra pilaris']

plot_tree(clf,fontsize= 4 ,feature_names= X_train.columns, class_names= ClassN, filled= True)

y_predict_gini = clf.predict(X_train.values)

print("taxa de precisão com dados de treino:{0:.2f}".format(metrics.accuracy_score(y_train, y_predict_gini)))

y_predict_gini = clf.predict(X_test.values)

print("taxa de precisão com dados de teste:{0:.2f}".format(metrics.accuracy_score(y_test, y_predict_gini)))

print("classificação dos dados de teste:",y_predict_gini)

map_dict = ['1:psoriasis','2:seborreic dermatitis','3:lichen planus','4:pityriasis rosea','5:chronic dermatitis','6:pityriasis rubra pilaris']

print(map_dict)

pred = [[3,3,3,2,1,0,0,0,1,1,1,0,0,1,0,1,2,0,2,2,2,2,2,1,0,0,0,0,0,0,0,1,0,8]]

predict_gini = clf.predict(pred)

print("classificação de um dado fora do conjunto de dados:",predict_gini)
